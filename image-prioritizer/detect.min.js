const consoleLogPrefix="[Image Prioritizer]",externalBackgroundImages=[];function log(...e){console.log(consoleLogPrefix,...e)}function warn(...e){console.warn(consoleLogPrefix,...e)}export async function initialize({isDebug:e,onLCP:n}){n((n=>{handleLCPMetric(n,e)}),{reportAllChanges:!0})}function getPerformanceResourceByURL(e){const n=performance.getEntriesByType("resource");for(const t of n)if(t.name===e)return t;return null}function handleLCPMetric(e,n){for(const t of e.entries){if(!t.url||!(t.element instanceof HTMLElement)||t.element instanceof HTMLImageElement||t.element instanceof HTMLVideoElement)continue;if(t.url.startsWith("data:"))continue;if(t.element.style.backgroundImage)continue;const e=getPerformanceResourceByURL(t.url);if(!e||!["css","link"].includes(e.initiatorType))return void(n&&warn(`Skipped considering URL (${t.url}) due to unexpected performance resource timing entry:`,e));if(t.url.length>500)return void(n&&log(`Skipping very long URL: ${t.url}`));if(t.element.tagName.length>100)return void(n&&log(`Skipping very long tag name: ${t.element.tagName}`));const o=t.element.getAttribute("id");if("string"==typeof o&&o.length>100)return void(n&&log(`Skipping very long ID: ${o}`));const r=t.element.getAttribute("class");if("string"==typeof r&&r.length>500)return void(n&&log(`Skipping very long className: ${r}`));const i={url:t.url,tag:t.element.tagName,id:o,class:r};n&&log("Detected external LCP background image:",i),externalBackgroundImages.push(i)}}export async function finalize({extendRootData:e,isDebug:n}){if(0===externalBackgroundImages.length)return;const t=externalBackgroundImages.pop();n&&log("Sending external background image for LCP element:",t),e({lcpElementExternalBackgroundImage:t})}